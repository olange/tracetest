name: Code build and checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  VERSION: pr-${{ github.event.pull_request.number }}
  TAG: pr-${{ github.event.pull_request.number }}

  TRACETEST_ENV: pr
  TRACETEST_DEV: true
  CYPRESS_BASE_URL: http://localhost:11633
  POKEMON_HTTP_ENDPOINT: http://demo-api:8081

  # We need to remove the need for these secrets so anyone can run the pipeline
  GORELEASER_KEY: ${{ secrets.GORELEASER_LICENSE }}
  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

jobs:
  backend-arch-graph:
    name: Generate backend architecture graph
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.work'
          cache: true
          cache-dependency-path: go.work
      - name: install graph tool
        run: |
          mkdir /tmp/go-arch
          cd /tmp/go-arch
          curl -SLO https://github.com/mathnogueira/golang-arch-viewer/archive/refs/heads/master.zip
          unzip master.zip
          cd golang-arch-viewer-master
          make
          mv dist/go-arch /tmp/go-arch/go-arch
      - name: generate graph
        run: |
          cd server
          mkdir -p ../dist/
          /tmp/go-arch/go-arch ../dist/architecture.png
      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: architecture-graph
          path: dist/architecture.png

  unit-test-cli:
    name: CLI unit tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.work'
          cache: true
          cache-dependency-path: go.work
      - name: Run unit tests
        run: cd cli; make test

  test-server:
    name: API Server unit tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.work'
          cache: true
          cache-dependency-path: go.work
      - name: Run unit tests
        run: cd server; make test

  test-web:
    name: WebUI unit tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        cmd:
          - npm run lint
          - npm test

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: web/package-lock.json
      - name: Cache dependencies
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: |
            web/node_modules
            /home/runner/.cache/Cypress
          key: npm--${{ hashFiles('web/package-lock.json') }}
          restore-keys: npm-
      - run: cd web; npm ci
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
      - run: cd web; ${{ matrix.cmd }}

  build-web:
    name: Build WebUI resources
    runs-on: ubuntu-latest
    needs: [test-web]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: web/package-lock.json
      - name: Cache Build
        id: cache-build
        uses: actions/cache@v3
        with:
          path: web/build/
          key: web-build-${{ hashFiles('web/*') }}
      - run: cd web; npm ci
        if: steps.cache-build.outputs.cache-hit != 'true'
      - run: cd web; CI= npm run build
        if: steps.cache-build.outputs.cache-hit != 'true'

      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: tracetest-web
          path: web/build/

  build-docker:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: [build-web]
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache Build
        id: cache-build
        uses: actions/cache@v3
        with:
          path: dist/
          key: dist-${{ hashFiles('web/*', 'cli/*', 'server/*', '.goreleaser.dev.yaml', 'Dockerfile') }}
      - name: Setup go
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.work'
          cache: true
          cache-dependency-path: go.work
      - uses: actions/download-artifact@v3
        if: steps.cache-build.outputs.cache-hit != 'true'
        with:
          name: tracetest-web
          path: web/build/
      - uses: goreleaser/goreleaser-action@v4
        if: steps.cache-build.outputs.cache-hit != 'true'
        with:
          distribution: goreleaser-pro
          version: v1.17.2
          args: release --skip-announce --snapshot -f .goreleaser.dev.yaml
      - name: Move binaries to known location
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          find ./dist -name 'tracetest' -exec cp {} ./dist \;
          find ./dist -name 'tracetest-server' -exec cp {} ./dist \;
          chmod +x ./dist/tracetest ./dist/tracetest-server
      - name: Export docker image
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          docker save --output dist/image.tar "kubeshop/tracetest:$VERSION"
      - name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: tracetest-dist
          path: dist/

  test-examples:
    name: Test examples
    needs:  [build-docker]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example_dir:
          - collector
          - tracetest-jaeger
          - tracetest-opensearch
          - tracetest-tempo
          - tracetest-no-tracing
          - tracetest-provisioning-env
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: tracetest-dist
          path: dist/
      - name: Import image
        run: |
          docker load --input dist/image.tar

      - name: Build example
        run: |
          cd examples/${{ matrix.example_dir }}
          docker-compose up -d
          docker compose logs -f > /tmp/docker-log &
      - name: Run example test
        run: |
          chmod +x ./dist/tracetest

          ./scripts/wait-for-port.sh 11633

          ./dist/tracetest configure -g --endpoint http://localhost:11633 --analytics=false
          ./dist/tracetest test run -d examples/${{ matrix.example_dir }}/tests/list-tests.yaml --wait-for-result || (cat /tmp/docker-log; exit 1)

  smoke-test-cli:
    name: CLI smoke tests
    needs:  [build-docker]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_env:
          - local
          - docker
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: tracetest-dist
          path: dist/

      - name: Import image
        run: |
          docker load --input dist/image.tar
      - name: Start server
        run: |
          cd examples/collector
          docker-compose up -d
          docker compose logs -f > /tmp/docker-log &
      - name: Run tests
        run: |
          chmod +x ./dist/tracetest ./cli/smoketest/run.bash

          ./scripts/wait-for-port.sh 11633

          cd ./cli/smoketest

          TRACETEST_CLI="../../dist/tracetest" \
          TEST_ENV="${{ matrix.test_env }}" \
          ./run.bash || (cat /tmp/docker-log; exit 1)

  trace-testing:
    needs: [build-docker]
    name: Tracetesting API Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: tracetest-dist
          path: dist/

      - name: Import image
        run: |
          docker load --input dist/image.tar

      - name: Start services
        run: |
          ./run.sh down up
          ./run.sh logstt > /tmp/docker-log &
      - name: Run tests
        run: |
          chmod +x ./dist/tracetest ./dist/tracetest-server

          ./scripts/wait-for-port.sh 11633
          ./run.sh tracetests || (cat /tmp/docker-log; exit 1)

  e2e:
    needs: [build-docker]
    name: WebUI End-to-end tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # run copies of the current job in parallel
        containers: [1, 2, 3, 4, 5, 6, 7, 8]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: web/package-lock.json

      - name: Cache dependencies
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          path: |
            web/node_modules
            /home/runner/.cache/Cypress
          key: npm--${{ hashFiles('web/package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: cd web/; npm ci

      - uses: actions/download-artifact@v3
        with:
          name: tracetest-dist
          path: dist/

      - name: Import image
        run: |
          docker load --input dist/image.tar

      - name: Start services
        run: |
          ./run.sh down up
          ./run.sh logstt > /tmp/docker-log &
          ./scripts/wait-for-port.sh 11633

      - name: Run integration tests
        run: |
          ./run.sh cypress || (cat /tmp/docker-log; exit 1)
