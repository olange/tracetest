"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[9353],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),i=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=i(r),f=o,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||a;return r?n.createElement(m,s(s({ref:t},p),{},{components:r})):n.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:o,s[1]=c;for(var i=2;i<a;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},51428:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>i});var n=r(87462),o=(r(67294),r(3905));const a={},s="Deployment",c={unversionedId:"deployment/overview",id:"deployment/overview",title:"Deployment",description:"This section contains a general overview of deploying Tracetest in production. You can find platform-specific guides for:",source:"@site/docs/deployment/overview.md",sourceDirName:"deployment",slug:"/deployment/overview",permalink:"/deployment/overview",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/deployment/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"OpenTelemetry Collector Configuration File Reference",permalink:"/configuration/opentelemetry-collector-configuration-file-reference"},next:{title:"Docker Deployment",permalink:"/deployment/docker"}},l={},i=[],p={toc:i},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deployment"},"Deployment"),(0,o.kt)("p",null,"This section contains a general overview of deploying Tracetest in production. You can find platform-specific guides for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./docker"},"Docker")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./kubernetes"},"Kubernetes"))),(0,o.kt)("p",null,"As shown in the diagram below, a typical production Tracetest deployment consists of Postgres, an OpenTelemetry Colletor and a ",(0,o.kt)("a",{parentName:"p",href:"../configuration/overview"},"trace data store"),". But, if you do not want to use a trace data store, you can rely entirely on OpenTelemetry Collector."),(0,o.kt)("mermaid",{value:'flowchart TD\n    A(("Tracetest"))\n    B[(Postgres)]\n    C(OpenTelemetry Collector)\n    D("Trace data store (optional)")\n\n\n    A <--\x3e |Tracetest stores test run data in Postgres| B\n    C --\x3e |OTel Collector sends traces to the trace data store| D\n    D --\x3e |Tracetest fetches traces to enrich e2e and integration tests| A\n\n    classDef tracetest fill:#61175e,stroke:#61175e,stroke-width:4px,color:#ffffff;\n\n    class A tracetest'}),(0,o.kt)("p",null,"Postgres stores all Tracetest-related data."),(0,o.kt)("p",null,"OpenTelemetry Collector ingests traces from your distributed system and forwards them to a trace data store."),(0,o.kt)("p",null,"A trace data store is used to store traces. Tracetest will fetch trace data from the trace data store when running tests."),(0,o.kt)("p",null,"Tracetest can be configured via a configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# tracetest.yaml\n\npostgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n")),(0,o.kt)("p",null,"Read more in the ",(0,o.kt)("a",{parentName:"p",href:"/configuration/overview"},"configuration docs"),"."),(0,o.kt)("p",null,"Or, continue reading to see how to run Tracetest in production with ",(0,o.kt)("a",{parentName:"p",href:"./docker"},"Docker")," or ",(0,o.kt)("a",{parentName:"p",href:"./kubernetes"},"Kubernetes"),"."))}d.isMDXComponent=!0}}]);