"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[8550],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),h=s,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||r;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},75186:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(87462),s=(n(67294),n(3905));const r={},o="Transactions",i={unversionedId:"concepts/transactions",id:"concepts/transactions",title:"Transactions",description:"Most End-to-End tests are not simple to run. They require some setup before the actual test is run. Actions like creating a new user, removing all items from a cart, etc. It is important that you can execute multiple steps as part of your test suite. Tracetest introduces the concept of Transactions to achieve this goal.",source:"@site/docs/concepts/transactions.md",sourceDirName:"concepts",slug:"/concepts/transactions",permalink:"/concepts/transactions",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/concepts/transactions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Expressions",permalink:"/concepts/expressions"},next:{title:"Versioning",permalink:"/concepts/versioning"}},l={},c=[{value:"What is a Transaction?",id:"what-is-a-transaction",level:2},{value:"Chaining Tests",id:"chaining-tests",level:2},{value:"How Values are Shared by Tests",id:"how-values-are-shared-by-tests",level:3},{value:"Exposing Values from a Test to Other Tests",id:"exposing-values-from-a-test-to-other-tests",level:3},{value:"Transactions Execution Flow",id:"transactions-execution-flow",level:3},{value:"Transaction where one step didn&#39;t get executed:",id:"transaction-where-one-step-didnt-get-executed",level:3},{value:"Transaction where all steps were executed, but the assertions failed:",id:"transaction-where-all-steps-were-executed-but-the-assertions-failed",level:3},{value:"Transaction where all steps succeeded:",id:"transaction-where-all-steps-succeeded",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"transactions"},"Transactions"),(0,s.kt)("p",null,"Most End-to-End tests are not simple to run. They require some setup before the actual test is run. Actions like creating a new user, removing all items from a cart, etc. It is important that you can execute multiple steps as part of your test suite. Tracetest introduces the concept of ",(0,s.kt)("strong",{parentName:"p"},"Transactions")," to achieve this goal."),(0,s.kt)("h2",{id:"what-is-a-transaction"},"What is a Transaction?"),(0,s.kt)("p",null,"A transaction is defined as a group of steps that are executed in the defined order and can access information exported by previous step executions. Each step is a test."),(0,s.kt)("h2",{id:"chaining-tests"},"Chaining Tests"),(0,s.kt)("p",null,"The main benefit of using transactions is to chain tests together and use values obtained from a test in a subsequent test."),(0,s.kt)("h3",{id:"how-values-are-shared-by-tests"},"How Values are Shared by Tests"),(0,s.kt)("p",null,"When a transaction is run, a context object is created with information about that specific run. One of those pieces of information is an ",(0,s.kt)("inlineCode",{parentName:"p"},"environment variables")," object, which is empty by default. If the transaction is run when referencing an ",(0,s.kt)("a",{parentName:"p",href:"./environments"},"environment"),", all values from the selected environments will be copied to the ",(0,s.kt)("inlineCode",{parentName:"p"},"environment variables")," object."),(0,s.kt)("p",null,"When a test is executed within a transaction, if it generates any outputs, its outputs will be injected into the transaction context environment variables object. After the outputs are injected, all subsequent tests to be run within the transaction will be able to reference those values."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u2139\ufe0f Outputs generated by steps don't modify the selected ",(0,s.kt)("a",{parentName:"p",href:"./environments"},"environment"),". It only modifies the transaction run context object.")),(0,s.kt)("p",null,"Consider you have 3 tests within a transaction: A, B, and C. Transactions A and B generate outputs called A_OUTPUT and B_OUTPUT, respectively. When running the transaction, we provide an environment which contains a ",(0,s.kt)("inlineCode",{parentName:"p"},"HOST")," environment variable. The execution of test A would only be able to reference ",(0,s.kt)("inlineCode",{parentName:"p"},"env:HOST"),". B would be able to reference ",(0,s.kt)("inlineCode",{parentName:"p"},"env:HOST"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"env:A_OUTPUT"),". While C would be able to reference all three environment variables: ",(0,s.kt)("inlineCode",{parentName:"p"},"env:HOST"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"env:A_OUTPUT"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"env:B_OUTPUT"),"."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u2139\ufe0f A single test can contain as many outputs as you like.")),(0,s.kt)("h3",{id:"exposing-values-from-a-test-to-other-tests"},"Exposing Values from a Test to Other Tests"),(0,s.kt)("p",null,"Since version v0.8, Tracetest allows tests to declare ",(0,s.kt)("inlineCode",{parentName:"p"},"outputs"),". An output is a value that is extracted from a trace by providing a ",(0,s.kt)("a",{parentName:"p",href:"./selectors"},"selector")," to choose which spans to use to get the information from, and an ",(0,s.kt)("a",{parentName:"p",href:"./expressions"},"expression")," to get the value from the selected spans. For example, consider that you want to expose the time a specific job was taken from a queue and began executing. An output would look something like the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'outputs:\n    - name: TIME_CANCEL_SUBSCRIPTION_MESSAGE_OBTAINED\n      selector: span[name = "Process request from cancel subscription queue"]\n      expression: attr:tracetest.time.start\n')),(0,s.kt)("p",null,"This would create an output called ",(0,s.kt)("inlineCode",{parentName:"p"},"TIME_CANCEL_SUBSCRIPTION_MESSAGE_OBTAINED")," that is obtained by reading the attribute ",(0,s.kt)("inlineCode",{parentName:"p"},"tracetest.time.start")," from the span with ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," equal to ",(0,s.kt)("inlineCode",{parentName:"p"},"Process request from cancel subscription queue"),". This value would would then be injected into the environment variables of that transaction to be accessed by other tests within the same transaction run."),(0,s.kt)("h3",{id:"transactions-execution-flow"},"Transactions Execution Flow"),(0,s.kt)("p",null,"Transaction steps are executed sequentially. A next step is only executed after the previous step finishes executing successfully. A successful step is one which managed to trigger an operation and received a trace back from the data store. Failing assertions do not stop a transaction from executing the next steps."),(0,s.kt)("p",null,"Examples:"),(0,s.kt)("h3",{id:"transaction-where-one-step-didnt-get-executed"},"Transaction where one step didn't get executed:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Step 1 (Finished)"),(0,s.kt)("li",{parentName:"ul"},"Step 2 (Failed to fetch trace)"),(0,s.kt)("li",{parentName:"ul"},"Step 3 (not executed)")),(0,s.kt)("p",null,"Result: ",(0,s.kt)("strong",{parentName:"p"},"FAILED")),(0,s.kt)("h3",{id:"transaction-where-all-steps-were-executed-but-the-assertions-failed"},"Transaction where all steps were executed, but the assertions failed:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Step 1 (Finished)"),(0,s.kt)("li",{parentName:"ul"},"Step 2 (Finished)"),(0,s.kt)("li",{parentName:"ul"},"Step 3 (Failed assertions)")),(0,s.kt)("p",null,"Result: ",(0,s.kt)("strong",{parentName:"p"},"FAILED")),(0,s.kt)("h3",{id:"transaction-where-all-steps-succeeded"},"Transaction where all steps succeeded:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Step 1 (Finished)"),(0,s.kt)("li",{parentName:"ul"},"Step 2 (Finished)"),(0,s.kt)("li",{parentName:"ul"},"Step 3 (Finished)")),(0,s.kt)("p",null,"Result: ",(0,s.kt)("strong",{parentName:"p"},"FINISHED")))}d.isMDXComponent=!0}}]);